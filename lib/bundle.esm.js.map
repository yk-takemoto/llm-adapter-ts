{"version":3,"file":"bundle.esm.js","sources":["../src/openai_adapter.ts","../src/azure_openai_adapter.ts","../src/anthropic_adapter.ts","../src/gemini_adapter.ts","../src/groq_adapter.ts","../src/llm_adapter_builder.ts","../src/llm_adapter_schemas.ts"],"sourcesContent":["import OpenAI from \"openai\";\nimport { createReadStream } from \"fs\";\nimport { LlmAdapter } from \"@/llm_adapter\";\nimport { LlmChatCompletionsContent, LlmChatCompletionsOptions, LlmChatCompletionsResponse, LlmTextToSpeechResponse, McpTool } from \"@/llm_adapter_schemas\";\n\nexport class OpenAIAdapter<T extends OpenAI> implements LlmAdapter {\n  protected openaiClient;\n\n  constructor(\n    protected llmConfig = {\n      apiKey: JSON.parse(process.env.APP_SECRETS || \"{}\").OPENAI_API_KEY || process.env.OPENAI_API_KEY || \"\",\n      apiModelChat: process.env.OPENAI_API_MODEL_CHAT!,\n      apiModelAudioTranscription: process.env.OPENAI_API_MODEL_AUDIO_TRANSCRIPTION!,\n      apiModelText2Speech: process.env.OPENAI_API_MODEL_TEXT2SPEECH!,\n    },\n    apiClient?: T,\n  ) {\n    this.initCheck(llmConfig);\n    this.openaiClient = apiClient || new OpenAI({ apiKey: llmConfig.apiKey });\n  }\n\n  private initCheck(llmConfig: Record<string, string>) {\n    for (const key of Object.keys(this.llmConfig)) {\n      if (!llmConfig[key]) {\n        throw new Error(`llmConfig.${key} is required but not set.`);\n      }\n    }\n  }\n\n  private addAdditionalPropertiesElementToObjectType(schema: any, bool: boolean = false) {\n    if (typeof schema !== \"object\" || schema === null) {\n      return schema;\n    }\n    if (schema.type === \"object\") {\n      schema.additionalProperties = bool;\n      if (schema.properties) {\n        for (const key in schema.properties) {\n          schema.properties[key] = this.addAdditionalPropertiesElementToObjectType(schema.properties[key], bool);\n        }\n      }\n    }\n    if (schema.type === \"array\" && schema.items) {\n      schema.items = this.addAdditionalPropertiesElementToObjectType(schema.items, bool);\n    }\n    return schema;\n  }\n\n  private convertTools(tools: McpTool[], isStrict?: boolean): OpenAI.ChatCompletionTool[] {\n    const strict = isStrict\n      ? {\n          strict: isStrict,\n        }\n      : {};\n    return tools.map((tool) => {\n      return {\n        type: \"function\",\n        function: {\n          name: tool.name,\n          description: tool.description,\n          ...strict,\n          parameters: isStrict ? this.addAdditionalPropertiesElementToObjectType(tool.inputSchema, !isStrict) : tool.inputSchema,\n        },\n      };\n    });\n  }\n\n  private convertResponseFormatJSONSchema(tool: McpTool): OpenAI.ResponseFormatJSONSchema {\n    return {\n      type: \"json_schema\",\n      json_schema: {\n        name: tool.name,\n        description: tool.description,\n        strict: true,\n        schema: this.addAdditionalPropertiesElementToObjectType(tool.inputSchema, false),\n      },\n    };\n  }\n\n  async chatCompletions(\n    systemPrompt: string[],\n    firstMessageContents: LlmChatCompletionsContent[],\n    options: LlmChatCompletionsOptions,\n    inProgress?: {\n      messages: OpenAI.ChatCompletionMessageParam[];\n      toolResults?: {\n        id: string;\n        content: string;\n      }[];\n    },\n  ): Promise<LlmChatCompletionsResponse> {\n    let updatedMessages: OpenAI.ChatCompletionMessageParam[] = [];\n    if (inProgress) {\n      const resMessages =\n        inProgress.toolResults?.map((toolResult) => {\n          return {\n            tool_call_id: toolResult.id,\n            role: \"tool\",\n            content: toolResult.content,\n          } as OpenAI.ChatCompletionMessageParam;\n        }) || [];\n      updatedMessages = inProgress.messages.concat(resMessages);\n    } else {\n      systemPrompt.forEach((msg) => {\n        updatedMessages.push({\n          role: \"system\",\n          content: msg,\n        });\n      });\n      updatedMessages.push({\n        role: \"user\",\n        content: firstMessageContents.map((content) => {\n          return content.image\n            ? {\n                type: \"image_url\",\n                image_url: {\n                  url: content.image.url,\n                  detail: content.image.detail || \"auto\",\n                },\n              }\n            : content.audio\n              ? {\n                  type: \"input_audio\",\n                  input_audio: {\n                    data: content.audio.data,\n                    format: content.audio.format || \"mp3\",\n                  },\n                }\n              : {\n                  type: \"text\",\n                  text: content.text || \"\",\n                };\n        }),\n      });\n    }\n\n    let toolsOption = {};\n    let resFormatOption = {};\n    if (options.tools && options.tools.length > 0) {\n      toolsOption =\n        options.purposeOfTools === \"function\"\n          ? {\n              tools: this.convertTools(options.tools, true),\n              tool_choice: options.toolChoice || (\"auto\" as OpenAI.ChatCompletionToolChoiceOption),\n            }\n          : {};\n      resFormatOption =\n        options.purposeOfTools === \"response_format\"\n          ? {\n              response_format: this.convertResponseFormatJSONSchema(options.tools[0]),\n            }\n          : {};\n    }\n\n    const chatOtions = {\n      model: this.llmConfig.apiModelChat,\n      messages: updatedMessages,\n      max_tokens: (options.maxTokens as number) || 1028,\n      temperature: (options.temperature as number) ?? 0.7,\n      ...toolsOption,\n      ...resFormatOption,\n    };\n    let response: LlmChatCompletionsResponse = {\n      text: \"\",\n      tools: [],\n      messages: [],\n    };\n    try {\n      // debug\n      console.log(\"[chatCompletions] start -- updatedMessages: \", JSON.stringify(updatedMessages));\n      const chatResponse = await this.openaiClient.chat.completions.create(chatOtions);\n      const choice = chatResponse.choices[0];\n      const finishReason = choice.finish_reason;\n      // debug\n      console.log(`[chatCompletions] end -- choices[0].message: ${JSON.stringify(choice.message)} finishReason: ${finishReason}`);\n\n      let resTools: { id: string; name: string; arguments: Record<string, any> }[] = [];\n      if (choice.message) {\n        updatedMessages.push(choice.message);\n        resTools =\n          finishReason === \"tool_calls\"\n            ? choice.message.tool_calls?.map((tool_call) => {\n                return {\n                  id: tool_call.id,\n                  name: tool_call.function.name,\n                  arguments: JSON.parse(tool_call.function.arguments) as Record<string, any>,\n                };\n              }) || []\n            : [];\n      }\n\n      response = {\n        text: choice.message?.content,\n        tools: resTools,\n        messages: updatedMessages,\n      };\n    } catch (error) {\n      // debug\n      console.log(\"[chatCompletions] Error: \", error);\n      throw error;\n    }\n\n    // debug\n    console.log(\"[chatCompletions] response: \", response);\n    return response;\n  }\n\n  async speechToText(audioFilePath: string, options?: Record<string, any>): Promise<string> {\n    const speechOtions = {\n      file: createReadStream(audioFilePath),\n      model: this.llmConfig.apiModelAudioTranscription,\n      language: options?.language || \"ja\",\n    };\n    try {\n      const response = await this.openaiClient.audio.transcriptions.create(speechOtions);\n      return response.text;\n    } catch (error) {\n      // debug\n      console.log(\"[speechToText] Error: \", error);\n      throw error;\n    }\n  }\n\n  async textToSpeech(message: string, options?: Record<string, any>): Promise<LlmTextToSpeechResponse> {\n    const speechOtions = {\n      model: this.llmConfig.apiModelText2Speech || \"tts-1\",\n      input: message,\n      voice: options?.voice || \"alloy\",\n      response_format: options?.responseFormat || \"mp3\",\n    };\n    try {\n      const response = await this.openaiClient.audio.speech.create(speechOtions);\n      const contentType = response.headers.get(\"content-type\");\n      const arrayBuffer = await response.arrayBuffer();\n      return {\n        contentType: contentType!,\n        content: Buffer.from(arrayBuffer),\n      };\n    } catch (error) {\n      // debug\n      console.log(\"[textToSpeech] Error: \", error);\n      throw error;\n    }\n  }\n}\n","import { AzureOpenAI } from \"openai\";\nimport { OpenAIAdapter } from \"@/openai_adapter\";\n\nexport class AzureOpenAIAdapter extends OpenAIAdapter<AzureOpenAI> {\n  constructor(\n    llmConfig = {\n      apiKey: JSON.parse(process.env.APP_SECRETS || \"{}\").AZURE_OPENAI_API_KEY || process.env.AZURE_OPENAI_API_KEY || \"\",\n      apiModelChat: process.env.AZURE_OPENAI_API_DEPLOYMENT_CHAT!,\n      apiModelAudioTranscription: process.env.AZURE_OPENAI_API_DEPLOYMENT_AUDIO_TRANSCRIPTION!,\n      apiModelText2Speech: process.env.AZURE_OPENAI_API_DEPLOYMENT_TEXT2SPEECH!,\n      endpoint: process.env.AZURE_OPENAI_ENDPOINT!,\n      apiVersion: process.env.OPENAI_API_VERSION!,\n    },\n  ) {\n    const apiClient = new AzureOpenAI({ apiKey: llmConfig.apiKey, endpoint: llmConfig.endpoint, apiVersion: llmConfig.apiVersion });\n    super(llmConfig, apiClient);\n  }\n}\n","import { promises as fs } from \"fs\";\nimport Anthropic from \"@anthropic-ai/sdk\";\nimport { LlmAdapter } from \"@/llm_adapter\";\nimport { LlmChatCompletionsContent, LlmChatCompletionsOptions, LlmChatCompletionsResponse, LlmTextToSpeechResponse, McpTool } from \"@/llm_adapter_schemas\";\n\nexport class AnthropicAdapter implements LlmAdapter {\n  protected anthropicClient;\n\n  constructor(\n    protected llmConfig = {\n      apiKey: JSON.parse(process.env.APP_SECRETS || \"{}\").ANTHROPIC_API_KEY || process.env.ANTHROPIC_API_KEY || \"\",\n      apiModelChat: process.env.ANTHROPIC_API_MODEL_CHAT!,\n    },\n  ) {\n    this.initCheck(llmConfig);\n    this.anthropicClient = new Anthropic({ apiKey: llmConfig.apiKey });\n  }\n\n  private initCheck(llmConfig: Record<string, string>) {\n    for (const key of Object.keys(this.llmConfig)) {\n      if (!llmConfig[key]) {\n        throw new Error(`llmConfig.${key} is required but not set.`);\n      }\n    }\n  }\n\n  private convertTools(tools: McpTool[]): Anthropic.Tool[] {\n    return tools.map((tool) => {\n      return {\n        name: tool.name,\n        description: tool.description,\n        input_schema: tool.inputSchema as Anthropic.Tool.InputSchema,\n      };\n    });\n  }\n\n  private async convertImageUrlToBase64(imageUrl: string): Promise<{\n    mimeType: string;\n    base64Content: string;\n  }> {\n    try {\n      const response = await fetch(imageUrl);\n      const arrayBuffer = await response.arrayBuffer();\n      const buffer = Buffer.from(arrayBuffer);\n\n      const mimeType = response.headers.get(\"content-type\") || \"image/jpeg\";\n      const base64Content = buffer.toString(\"base64\");\n      return { mimeType, base64Content };\n    } catch (error) {\n      throw new Error(`Failed to fetch or convert image: ${error}`);\n    }\n  }\n\n  private convertMessagesForHistory(messages: Anthropic.MessageParam[]): Anthropic.MessageParam[] {\n    return messages.map((message) => ({\n      role: message.role,\n      content: Array.isArray(message.content)\n        ? message.content.map((item) =>\n            item.type === \"image\" ? ({ ...item, source: { ...item.source, data: \"ommitted\" } } as Anthropic.ImageBlockParam) : item,\n          )\n        : message.content,\n    }));\n  }\n\n  async chatCompletions(\n    systemPrompt: string[],\n    firstMessageContents: LlmChatCompletionsContent[],\n    options: LlmChatCompletionsOptions,\n    inProgress?: {\n      messages: Anthropic.MessageParam[];\n      toolResults?: {\n        id: string;\n        content: string;\n      }[];\n    },\n  ): Promise<LlmChatCompletionsResponse> {\n    const covertedSystemPrompt: Anthropic.TextBlockParam[] = [];\n    systemPrompt.forEach((msg) => {\n      covertedSystemPrompt.push({\n        type: \"text\",\n        text: msg,\n      });\n    });\n    let updatedMessages: Anthropic.MessageParam[] = [];\n    if (inProgress) {\n      const resMessages =\n        inProgress.toolResults?.map((toolResult) => {\n          return {\n            tool_use_id: toolResult.id,\n            type: \"tool_result\" as const,\n            content: toolResult.content,\n          } as Anthropic.ToolResultBlockParam;\n        }) || [];\n      updatedMessages = inProgress.messages.concat({ role: \"user\", content: resMessages });\n    } else {\n      const list = await Promise.all(\n        firstMessageContents.map(async (content) => {\n          if (content.image) {\n            const { mimeType, base64Content } = await this.convertImageUrlToBase64(content.image.url);\n            return {\n              type: \"image\",\n              source: {\n                type: \"base64\",\n                media_type: mimeType,\n                data: base64Content,\n              },\n            } as Anthropic.ImageBlockParam;\n          } else {\n            return {\n              type: \"text\",\n              text: content.text || \"\",\n            } as Anthropic.TextBlockParam;\n          }\n        }),\n      );\n      updatedMessages.push({\n        role: \"user\",\n        content: list,\n      });\n    }\n\n    const toolsOption =\n      options.tools && options.tools.length > 0\n        ? {\n            tools: this.convertTools(options.tools),\n            tool_choice: { type: options.toolChoice || \"auto\" } as Anthropic.ToolChoice,\n          }\n        : {};\n\n    const chatOtions: Anthropic.MessageCreateParams = {\n      model: this.llmConfig.apiModelChat,\n      messages: updatedMessages,\n      system: covertedSystemPrompt,\n      max_tokens: (options.maxTokens as number) || 1028,\n      temperature: (options.temperature as number) ?? 0.7,\n      ...toolsOption,\n    };\n    let response: LlmChatCompletionsResponse = {\n      text: \"\",\n      tools: [],\n      messages: [],\n    };\n    try {\n      // For history\n      const historyMessages = this.convertMessagesForHistory(updatedMessages);\n\n      // debug\n      console.log(\n        \"[chatCompletions] start -- covertedSystemPrompt: \",\n        JSON.stringify(covertedSystemPrompt),\n        \" -- historyMessages: \",\n        JSON.stringify(historyMessages),\n      );\n      const chatResponse = await this.anthropicClient.messages.create(chatOtions);\n      const contents = chatResponse.content;\n      const stopReason = chatResponse.stop_reason;\n      // debug\n      console.log(`[chatCompletions] end -- contents: ${JSON.stringify(contents)} stopReason: ${stopReason}`);\n\n      let resTools: { id: string; name: string; arguments: Record<string, any> }[] = [];\n      if (chatResponse) {\n        historyMessages.push({\n          role: chatResponse.role,\n          content: contents,\n        });\n        resTools =\n          stopReason === \"tool_use\"\n            ? contents\n                ?.filter((contentBlock) => contentBlock.type === \"tool_use\")\n                .map((contentBlock) => {\n                  return {\n                    id: contentBlock.id,\n                    name: contentBlock.name,\n                    arguments: JSON.parse(JSON.stringify(contentBlock.input)) as Record<string, any>,\n                  };\n                }) || []\n            : [];\n      }\n\n      response = {\n        text:\n          resTools.length > 0 && options.purposeOfTools === \"response_format\"\n            ? JSON.stringify(resTools[0].arguments)\n            : (contents[0] as Anthropic.TextBlock).text || null,\n        tools: resTools,\n        messages: historyMessages,\n      };\n    } catch (error) {\n      // debug\n      console.log(\"[chatCompletions] Error: \", error);\n      throw error;\n    }\n\n    // debug\n    console.log(\"[chatCompletions] response: \", response);\n    return response;\n  }\n\n  async speechToText(__: string, ___?: Record<string, any>): Promise<string> {\n    //================ Not supported\n    try {\n      return \"unsupported\";\n    } catch (error) {\n      // debug\n      console.log(\"[speechToText] Error: \", error);\n      throw error;\n    }\n  }\n\n  async textToSpeech(_: string, options?: Record<string, any>): Promise<LlmTextToSpeechResponse> {\n    //================ Not supported\n    try {\n      const sorryFormat = options?.responseFormat === \"wav\" || options?.responseFormat === \"aac\" ? options.responseFormat : \"mp3\";\n      const sorry = await fs.readFile(`audio/sorry.ja.${sorryFormat}`);\n      const contentType = sorryFormat === \"mp3\" ? \"audio/mpeg\" : `audio/${sorryFormat}`;\n      return {\n        contentType: contentType,\n        content: sorry,\n      };\n    } catch (error) {\n      // debug\n      console.log(\"[textToSpeech] Error: \", error);\n      throw error;\n    }\n  }\n}\n","import { promises as fs } from \"fs\";\nimport {\n  GoogleGenerativeAI,\n  HarmBlockThreshold,\n  HarmCategory,\n  ModelParams,\n  Content,\n  FunctionDeclaration,\n  Tool,\n  FunctionCallingMode,\n  FunctionCallPart,\n  GenerationConfig,\n  ResponseSchema,\n  Part,\n} from \"@google/generative-ai\";\nimport { LlmAdapter } from \"@/llm_adapter\";\nimport { LlmChatCompletionsContent, LlmChatCompletionsOptions, LlmChatCompletionsResponse, LlmTextToSpeechResponse, McpTool } from \"@/llm_adapter_schemas\";\n\nexport class GeminiAdapter implements LlmAdapter {\n  protected geminiClient;\n\n  constructor(\n    protected llmConfig = {\n      apiKey: JSON.parse(process.env.APP_SECRETS || \"{}\").GEMINI_API_KEY || process.env.GEMINI_API_KEY || \"\",\n      apiModelChat: process.env.GEMINI_API_MODEL_CHAT!,\n    },\n  ) {\n    this.initCheck(llmConfig);\n    this.geminiClient = new GoogleGenerativeAI(llmConfig.apiKey);\n  }\n\n  private initCheck(llmConfig: Record<string, string>) {\n    for (const key of Object.keys(this.llmConfig)) {\n      if (!llmConfig[key]) {\n        throw new Error(`llmConfig.${key} is required but not set.`);\n      }\n    }\n  }\n\n  // A function to delete parameters such as additionalProperties because the GeminiAPI tool schema does not support jsonSchema7.\n  private cleanJsonSchema(schema: Record<string, any>): Record<string, any> {\n    if (typeof schema !== \"object\" || schema === null) {\n      return schema;\n    }\n    if (schema.type === \"object\") {\n      const cleanedSchema: Record<string, any> = {};\n      Object.keys(schema).forEach((key) => {\n        if (key !== \"additionalProperties\" && key !== \"$schema\") {\n          if (key === \"properties\") {\n            cleanedSchema.properties = Object.keys(schema.properties).reduce(\n              (acc, propKey) => ({\n                ...acc,\n                [propKey]: this.cleanJsonSchema(schema.properties[propKey]),\n              }),\n              {},\n            );\n          } else {\n            cleanedSchema[key] = schema[key];\n          }\n        }\n      });\n      return cleanedSchema;\n    }\n    if (schema.type === \"array\" && schema.items) {\n      const { items, ...rest } = schema;\n      return {\n        ...rest,\n        items: this.cleanJsonSchema(items),\n      };\n    }\n    return schema;\n  }\n\n  private convertTools(tools: McpTool[]): Tool[] {\n    const functions = tools.map((tool) => {\n      return {\n        name: tool.name,\n        description: tool.description,\n        parameters: this.cleanJsonSchema(tool.inputSchema),\n      } as FunctionDeclaration;\n    });\n    return [{ functionDeclarations: functions }];\n  }\n\n  private convertResponseFormatJSONSchema(tool: McpTool): GenerationConfig {\n    return {\n      responseMimeType: \"application/json\",\n      responseSchema: tool.inputSchema as ResponseSchema,\n    };\n  }\n\n  private async convertImageUrlToBase64(imageUrl: string): Promise<{\n    mimeType: string;\n    base64Content: string;\n  }> {\n    try {\n      const response = await fetch(imageUrl);\n      const arrayBuffer = await response.arrayBuffer();\n      const buffer = Buffer.from(arrayBuffer);\n\n      const mimeType = response.headers.get(\"content-type\") || \"image/jpeg\";\n      const base64Content = buffer.toString(\"base64\");\n      return { mimeType, base64Content };\n    } catch (error) {\n      throw new Error(`Failed to fetch or convert image: ${error}`);\n    }\n  }\n\n  private convertMessagesForHistory(messages: Content[]): Content[] {\n    return messages.map((message) => ({\n      role: message.role,\n      parts: message.parts.map((part) => (part.inlineData?.data ? ({ ...part, inlineData: { ...part.inlineData, data: \"ommitted\" } } as Part) : part)),\n    }));\n  }\n\n  async chatCompletions(\n    systemPrompt: string[],\n    firstMessageContents: LlmChatCompletionsContent[],\n    options: LlmChatCompletionsOptions,\n    inProgress?: {\n      messages: Content[];\n      toolResults?: {\n        id: string;\n        content: string;\n      }[];\n    },\n  ): Promise<LlmChatCompletionsResponse> {\n    const covertedSystemPrompt: Content = {\n      role: \"model\",\n      parts: [],\n    };\n    systemPrompt.forEach((msg) => {\n      covertedSystemPrompt.parts.push({\n        text: msg,\n      });\n    });\n    let updatedMessages: Content[] = [];\n    if (inProgress) {\n      const resParts =\n        inProgress.toolResults?.map((toolResult) => {\n          return { text: toolResult.content };\n        }) || [];\n      updatedMessages = inProgress.messages.concat({ role: \"user\", parts: resParts });\n    } else {\n      const resParts = await Promise.all(\n        firstMessageContents.map(async (content) => {\n          if (content.image) {\n            const { mimeType, base64Content } = await this.convertImageUrlToBase64(content.image.url);\n            return {\n              inlineData: {\n                mimeType: mimeType,\n                data: base64Content,\n              },\n            };\n          } else {\n            return { text: content.text || \"\" };\n          }\n        }),\n      );\n      updatedMessages.push({ role: \"user\", parts: resParts });\n    }\n\n    let toolsOption = {};\n    let resFormatOption = {};\n    if (options.tools && options.tools.length > 0) {\n      toolsOption =\n        options.purposeOfTools === \"function\"\n          ? {\n              tools: this.convertTools(options.tools),\n              toolConfig: {\n                functionCallingConfig: {\n                  mode: (String(options.toolChoice).toUpperCase() as FunctionCallingMode) || FunctionCallingMode.AUTO,\n                },\n              },\n            }\n          : {};\n      resFormatOption = options.purposeOfTools === \"response_format\" ? this.convertResponseFormatJSONSchema(options.tools[0]) : {};\n    }\n\n    const modelParams: ModelParams = {\n      safetySettings: [\n        {\n          category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n          threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,\n        },\n      ],\n      generationConfig: {\n        maxOutputTokens: (options.maxTokens as number) || 1028,\n        temperature: (options.temperature as number) ?? 0.7,\n        ...resFormatOption,\n      },\n      model: this.llmConfig.apiModelChat,\n      systemInstruction: covertedSystemPrompt,\n      ...toolsOption,\n    };\n    let response: LlmChatCompletionsResponse = {\n      text: \"\",\n      tools: [],\n      messages: [],\n    };\n    try {\n      // For history\n      const historyMessages = this.convertMessagesForHistory(updatedMessages);\n\n      // debug\n      console.log(\"[chatCompletions] start -- historyMessages: \", JSON.stringify(historyMessages));\n\n      const chatResult = await this.geminiClient.getGenerativeModel(modelParams).generateContent({\n        contents: updatedMessages,\n      });\n      const chatResponse = chatResult.response;\n      const text = chatResponse.text();\n      const funcCalls = chatResponse.functionCalls();\n      const finishReason = chatResponse.candidates && chatResponse.candidates[0].finishReason;\n      // debug\n      console.log(`[chatCompletions] end -- response.text: ${text} response.functionCalls: ${JSON.stringify(funcCalls)} finishReason: ${finishReason}`);\n\n      let resTools: { id: string; name: string; arguments: Record<string, any> }[] = [];\n      if (chatResponse) {\n        const parts: FunctionCallPart[] = [];\n        resTools = funcCalls\n          ? funcCalls?.map((funcCall) => {\n              parts.push({ functionCall: funcCall });\n              return {\n                id: \"\",\n                name: funcCall.name,\n                arguments: JSON.parse(JSON.stringify(funcCall.args)) as Record<string, any>,\n              };\n            }) || []\n          : [];\n        historyMessages.push({ role: \"model\", parts: parts });\n      }\n\n      response = {\n        text: text,\n        tools: resTools,\n        messages: historyMessages,\n      };\n    } catch (error) {\n      // debug\n      console.log(\"[chatCompletions] Error: \", error);\n      throw error;\n    }\n\n    // debug\n    console.log(\"[chatCompletions] response: \", response);\n    return response;\n  }\n\n  async speechToText(__: string, ___?: Record<string, any>): Promise<string> {\n    //================ Not supported\n    try {\n      return \"unsupported\";\n    } catch (error) {\n      // debug\n      console.log(\"[speechToText] Error: \", error);\n      throw error;\n    }\n  }\n\n  async textToSpeech(_: string, options?: Record<string, any>): Promise<LlmTextToSpeechResponse> {\n    //================ Not supported\n    try {\n      const sorryFormat = options?.responseFormat === \"wav\" || options?.responseFormat === \"aac\" ? options.responseFormat : \"mp3\";\n      const sorry = await fs.readFile(`audio/sorry.ja.${sorryFormat}`);\n      const contentType = sorryFormat === \"mp3\" ? \"audio/mpeg\" : `audio/${sorryFormat}`;\n      return {\n        contentType: contentType,\n        content: sorry,\n      };\n    } catch (error) {\n      // debug\n      console.log(\"[textToSpeech] Error: \", error);\n      throw error;\n    }\n  }\n}\n","import { promises as fs } from \"fs\";\nimport { Groq } from \"groq-sdk\";\nimport { LlmAdapter } from \"@/llm_adapter\";\nimport { LlmChatCompletionsContent, LlmChatCompletionsOptions, LlmChatCompletionsResponse, LlmTextToSpeechResponse, McpTool } from \"@/llm_adapter_schemas\";\n\nexport class GroqAdapter implements LlmAdapter {\n  protected groqClient;\n\n  constructor(\n    protected llmConfig = {\n      apiKey: JSON.parse(process.env.APP_SECRETS || \"{}\").GROQ_API_KEY || process.env.GROQ_API_KEY || \"\",\n      apiModelChat: process.env.GROQ_API_MODEL_CHAT!,\n    },\n  ) {\n    this.initCheck(llmConfig);\n    this.groqClient = new Groq({ apiKey: llmConfig.apiKey });\n  }\n\n  private initCheck(llmConfig: Record<string, string>) {\n    for (const key of Object.keys(this.llmConfig)) {\n      if (!llmConfig[key]) {\n        throw new Error(`llmConfig.${key} is required but not set.`);\n      }\n    }\n  }\n\n  private convertTools(tools: McpTool[]): Groq.Chat.ChatCompletionTool[] {\n    return tools.map((tool) => {\n      return {\n        type: \"function\",\n        function: {\n          name: tool.name,\n          description: tool.description,\n          parameters: tool.inputSchema,\n        },\n      };\n    });\n  }\n\n  async chatCompletions(\n    systemPrompt: string[],\n    firstMessageContents: LlmChatCompletionsContent[],\n    options: LlmChatCompletionsOptions,\n    inProgress?: {\n      messages: Groq.Chat.ChatCompletionMessageParam[];\n      toolResults?: {\n        id: string;\n        content: string;\n      }[];\n    },\n  ): Promise<LlmChatCompletionsResponse> {\n    let updatedMessages: Groq.Chat.ChatCompletionMessageParam[] = [];\n    if (inProgress) {\n      const resMessages =\n        inProgress.toolResults?.map((toolResult) => {\n          return {\n            tool_call_id: toolResult.id,\n            role: \"tool\",\n            content: toolResult.content,\n          } as Groq.Chat.ChatCompletionMessageParam;\n        }) || [];\n      updatedMessages = inProgress.messages.concat(resMessages);\n    } else {\n      // Solutions to the following issues:\n      // \"prompting with images is incompatible with system messages\"\n      const hasImage = firstMessageContents.some((content) => content.image);\n      if (hasImage) {\n        updatedMessages.push({\n          role: \"user\",\n          content: systemPrompt.map((msg) => {\n            return {\n              type: \"text\",\n              text: msg,\n            };\n          }),\n        });\n      } else {\n        systemPrompt.forEach((msg) => {\n          updatedMessages.push({\n            role: \"system\",\n            content: msg,\n          });\n        });\n      }\n\n      updatedMessages.push({\n        role: \"user\",\n        content: firstMessageContents.map((content) => {\n          return content.image\n            ? {\n                type: \"image_url\",\n                image_url: {\n                  url: content.image.url,\n                  detail: content.image.detail || \"auto\",\n                },\n              }\n            : {\n                type: \"text\",\n                text: content.text || \"\",\n              };\n        }),\n      });\n    }\n\n    let toolsOption = {};\n    let resFormatOption = {};\n    if (options.tools && options.tools.length > 0) {\n      toolsOption =\n        options.purposeOfTools === \"function\"\n          ? {\n              tools: this.convertTools(options.tools),\n              tool_choice: options.toolChoice || (\"auto\" as Groq.Chat.ChatCompletionToolChoiceOption),\n            }\n          : {};\n      resFormatOption =\n        options.purposeOfTools === \"response_format\"\n          ? {\n              response_format: {\n                type: \"json_object\",\n              } as Groq.Chat.CompletionCreateParams.ResponseFormat,\n            }\n          : {};\n    }\n\n    const chatOtions = {\n      model: this.llmConfig.apiModelChat,\n      messages: updatedMessages,\n      max_tokens: (options.maxTokens as number) || 1028,\n      temperature: (options.temperature as number) ?? 0.7,\n      ...toolsOption,\n      ...resFormatOption,\n    };\n    let response: LlmChatCompletionsResponse = {\n      text: \"\",\n      tools: [],\n      messages: [],\n    };\n    try {\n      // debug\n      console.log(\"[chatCompletions] start -- updatedMessages: \", JSON.stringify(updatedMessages));\n      const chatResponse = await this.groqClient.chat.completions.create(chatOtions);\n      const choice = chatResponse.choices[0];\n      const finishReason = choice.finish_reason;\n      // debug\n      console.log(`[chatCompletions] end -- choices[0].message: ${JSON.stringify(choice.message)} finishReason: ${finishReason}`);\n\n      let resTools: { id: string; name: string; arguments: Record<string, any> }[] = [];\n      if (choice.message) {\n        updatedMessages.push(choice.message);\n        resTools =\n          finishReason === \"tool_calls\"\n            ? choice.message.tool_calls?.map((tool_call) => {\n                return {\n                  id: tool_call.id,\n                  name: tool_call.function.name,\n                  arguments: JSON.parse(tool_call.function.arguments) as Record<string, any>,\n                };\n              }) || []\n            : [];\n      }\n\n      response = {\n        text: choice.message?.content,\n        tools: resTools,\n        messages: updatedMessages,\n      };\n    } catch (error) {\n      // debug\n      console.log(\"[chatCompletions] Error: \", error);\n      throw error;\n    }\n\n    // debug\n    console.log(\"[chatCompletions] response: \", response);\n    return response;\n  }\n\n  async speechToText(__: string, ___?: Record<string, any>): Promise<string> {\n    //================ Not supported\n    try {\n      return \"unsupported\";\n    } catch (error) {\n      // debug\n      console.log(\"[speechToText] Error: \", error);\n      throw error;\n    }\n  }\n\n  async textToSpeech(_: string, options?: Record<string, any>): Promise<LlmTextToSpeechResponse> {\n    //================ Not supported\n    try {\n      const sorryFormat = options?.responseFormat === \"wav\" || options?.responseFormat === \"aac\" ? options.responseFormat : \"mp3\";\n      const sorry = await fs.readFile(`audio/sorry.ja.${sorryFormat}`);\n      const contentType = sorryFormat === \"mp3\" ? \"audio/mpeg\" : `audio/${sorryFormat}`;\n      return {\n        contentType: contentType,\n        content: sorry,\n      };\n    } catch (error) {\n      // debug\n      console.log(\"[textToSpeech] Error: \", error);\n      throw error;\n    }\n  }\n}\n","import { LlmAdapter } from \"@/llm_adapter\";\nimport { OpenAIAdapter } from \"@/openai_adapter\";\nimport { AzureOpenAIAdapter } from \"@/azure_openai_adapter\";\nimport { AnthropicAdapter } from \"@/anthropic_adapter\";\nimport { GeminiAdapter } from \"@/gemini_adapter\";\nimport { GroqAdapter } from \"@/groq_adapter\";\n\ntype LlmAdapterConstructor = new (...args: any[]) => LlmAdapter;\nconst llmAdapterClasses: Record<string, LlmAdapterConstructor> = {\n  OpenAI: OpenAIAdapter,\n  AzureOpenAI: AzureOpenAIAdapter,\n  Anthropic: AnthropicAdapter,\n  Google: GeminiAdapter,\n  Groq: GroqAdapter,\n};\n\nconst llmAdapterBuilder = (llmId: string): LlmAdapter => {\n  const llmAdapterClass = llmAdapterClasses[llmId];\n  return new llmAdapterClass();\n};\n\nexport default llmAdapterBuilder;\n","import { z } from \"zod\";\n\nexport const llmChatCompletionsResponseSchema = z.object({\n  text: z.string().nullable(),\n  tools: z.array(\n    z.object({\n      id: z.string(),\n      name: z.string(),\n      arguments: z.record(z.any()),\n    }),\n  ),\n  messages: z.array(z.any()),\n});\n\nexport const llmChatCompletionsContentSchema = z.object({\n  text: z.string().optional(),\n  image: z\n    .object({\n      url: z.string(),\n      detail: z.any().optional(),\n    })\n    .optional(),\n  audio: z\n    .object({\n      data: z.string(),\n      format: z.any().optional(),\n    })\n    .optional(),\n});\n\nexport const llmChatCompletionsOptionsSchema = z\n  .object({\n    tools: z.array(z.any()).optional(),\n    toolChoice: z.any().optional(),\n    purposeOfTools: z.enum([\"function\", \"response_format\"]).optional(),\n  })\n  .catchall(z.any());\n\nexport const llmTextToSpeechResponseSchema = z.object({\n  contentType: z.string(),\n  content: z.instanceof(Buffer),\n});\n\nexport const mcpToolSchema = z.object({\n  name: z.string(),\n  description: z.string(),\n  inputSchema: z.object({\n    type: z.string(),\n    properties: z.record(z.any()),\n    required: z.array(z.string()),\n  }),\n});\n\nexport type LlmChatCompletionsResponse = z.infer<typeof llmChatCompletionsResponseSchema>;\nexport type LlmChatCompletionsContent = z.infer<typeof llmChatCompletionsContentSchema>;\nexport type LlmChatCompletionsOptions = z.infer<typeof llmChatCompletionsOptionsSchema>;\nexport type LlmTextToSpeechResponse = z.infer<typeof llmTextToSpeechResponseSchema>;\nexport type McpTool = z.infer<typeof mcpToolSchema>;\n"],"names":["fs"],"mappings":";;;;;;;MAKa,aAAa,CAAA;AAGxB,IAAA,WAAA,CACY,SAAY,GAAA;QACpB,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,cAAc,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,EAAE;AACtG,QAAA,YAAY,EAAE,OAAO,CAAC,GAAG,CAAC,qBAAsB;AAChD,QAAA,0BAA0B,EAAE,OAAO,CAAC,GAAG,CAAC,oCAAqC;AAC7E,QAAA,mBAAmB,EAAE,OAAO,CAAC,GAAG,CAAC,4BAA6B;AAC/D,KAAA,EACD,SAAa,EAAA;QANH,IAAS,CAAA,SAAA,GAAT,SAAS;AAQnB,QAAA,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;AACzB,QAAA,IAAI,CAAC,YAAY,GAAG,SAAS,IAAI,IAAI,MAAM,CAAC,EAAE,MAAM,EAAE,SAAS,CAAC,MAAM,EAAE,CAAC;;AAGnE,IAAA,SAAS,CAAC,SAAiC,EAAA;AACjD,QAAA,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;AAC7C,YAAA,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;AACnB,gBAAA,MAAM,IAAI,KAAK,CAAC,aAAa,GAAG,CAAA,yBAAA,CAA2B,CAAC;;;;AAK1D,IAAA,0CAA0C,CAAC,MAAW,EAAE,IAAA,GAAgB,KAAK,EAAA;QACnF,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,KAAK,IAAI,EAAE;AACjD,YAAA,OAAO,MAAM;;AAEf,QAAA,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE;AAC5B,YAAA,MAAM,CAAC,oBAAoB,GAAG,IAAI;AAClC,YAAA,IAAI,MAAM,CAAC,UAAU,EAAE;AACrB,gBAAA,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,UAAU,EAAE;AACnC,oBAAA,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,0CAA0C,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC;;;;QAI5G,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,IAAI,MAAM,CAAC,KAAK,EAAE;AAC3C,YAAA,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,0CAA0C,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC;;AAEpF,QAAA,OAAO,MAAM;;IAGP,YAAY,CAAC,KAAgB,EAAE,QAAkB,EAAA;QACvD,MAAM,MAAM,GAAG;AACb,cAAE;AACE,gBAAA,MAAM,EAAE,QAAQ;AACjB;cACD,EAAE;AACN,QAAA,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,KAAI;YACxB,OAAO;AACL,gBAAA,IAAI,EAAE,UAAU;AAChB,gBAAA,QAAQ,EAAE;oBACR,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,WAAW,EAAE,IAAI,CAAC,WAAW;AAC7B,oBAAA,GAAG,MAAM;oBACT,UAAU,EAAE,QAAQ,GAAG,IAAI,CAAC,0CAA0C,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,WAAW;AACvH,iBAAA;aACF;AACH,SAAC,CAAC;;AAGI,IAAA,+BAA+B,CAAC,IAAa,EAAA;QACnD,OAAO;AACL,YAAA,IAAI,EAAE,aAAa;AACnB,YAAA,WAAW,EAAE;gBACX,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,WAAW,EAAE,IAAI,CAAC,WAAW;AAC7B,gBAAA,MAAM,EAAE,IAAI;gBACZ,MAAM,EAAE,IAAI,CAAC,0CAA0C,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC;AACjF,aAAA;SACF;;IAGH,MAAM,eAAe,CACnB,YAAsB,EACtB,oBAAiD,EACjD,OAAkC,EAClC,UAMC,EAAA;QAED,IAAI,eAAe,GAAwC,EAAE;QAC7D,IAAI,UAAU,EAAE;YACd,MAAM,WAAW,GACf,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,UAAU,KAAI;gBACzC,OAAO;oBACL,YAAY,EAAE,UAAU,CAAC,EAAE;AAC3B,oBAAA,IAAI,EAAE,MAAM;oBACZ,OAAO,EAAE,UAAU,CAAC,OAAO;iBACS;aACvC,CAAC,IAAI,EAAE;YACV,eAAe,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC;;aACpD;AACL,YAAA,YAAY,CAAC,OAAO,CAAC,CAAC,GAAG,KAAI;gBAC3B,eAAe,CAAC,IAAI,CAAC;AACnB,oBAAA,IAAI,EAAE,QAAQ;AACd,oBAAA,OAAO,EAAE,GAAG;AACb,iBAAA,CAAC;AACJ,aAAC,CAAC;YACF,eAAe,CAAC,IAAI,CAAC;AACnB,gBAAA,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE,oBAAoB,CAAC,GAAG,CAAC,CAAC,OAAO,KAAI;oBAC5C,OAAO,OAAO,CAAC;AACb,0BAAE;AACE,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE;AACT,gCAAA,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC,GAAG;AACtB,gCAAA,MAAM,EAAE,OAAO,CAAC,KAAK,CAAC,MAAM,IAAI,MAAM;AACvC,6BAAA;AACF;0BACD,OAAO,CAAC;AACR,8BAAE;AACE,gCAAA,IAAI,EAAE,aAAa;AACnB,gCAAA,WAAW,EAAE;AACX,oCAAA,IAAI,EAAE,OAAO,CAAC,KAAK,CAAC,IAAI;AACxB,oCAAA,MAAM,EAAE,OAAO,CAAC,KAAK,CAAC,MAAM,IAAI,KAAK;AACtC,iCAAA;AACF;AACH,8BAAE;AACE,gCAAA,IAAI,EAAE,MAAM;AACZ,gCAAA,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,EAAE;6BACzB;AACT,iBAAC,CAAC;AACH,aAAA,CAAC;;QAGJ,IAAI,WAAW,GAAG,EAAE;QACpB,IAAI,eAAe,GAAG,EAAE;AACxB,QAAA,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7C,WAAW;gBACT,OAAO,CAAC,cAAc,KAAK;AACzB,sBAAE;wBACE,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC;AAC7C,wBAAA,WAAW,EAAE,OAAO,CAAC,UAAU,IAAK,MAAgD;AACrF;sBACD,EAAE;YACR,eAAe;gBACb,OAAO,CAAC,cAAc,KAAK;AACzB,sBAAE;wBACE,eAAe,EAAE,IAAI,CAAC,+BAA+B,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACxE;sBACD,EAAE;;AAGV,QAAA,MAAM,UAAU,GAAG;AACjB,YAAA,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY;AAClC,YAAA,QAAQ,EAAE,eAAe;AACzB,YAAA,UAAU,EAAG,OAAO,CAAC,SAAoB,IAAI,IAAI;AACjD,YAAA,WAAW,EAAG,OAAO,CAAC,WAAsB,IAAI,GAAG;AACnD,YAAA,GAAG,WAAW;AACd,YAAA,GAAG,eAAe;SACnB;AACD,QAAA,IAAI,QAAQ,GAA+B;AACzC,YAAA,IAAI,EAAE,EAAE;AACR,YAAA,KAAK,EAAE,EAAE;AACT,YAAA,QAAQ,EAAE,EAAE;SACb;AACD,QAAA,IAAI;;AAEF,YAAA,OAAO,CAAC,GAAG,CAAC,8CAA8C,EAAE,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;AAC5F,YAAA,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC;YAChF,MAAM,MAAM,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;AACtC,YAAA,MAAM,YAAY,GAAG,MAAM,CAAC,aAAa;;AAEzC,YAAA,OAAO,CAAC,GAAG,CAAC,CAAgD,6CAAA,EAAA,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA,eAAA,EAAkB,YAAY,CAAA,CAAE,CAAC;YAE3H,IAAI,QAAQ,GAAmE,EAAE;AACjF,YAAA,IAAI,MAAM,CAAC,OAAO,EAAE;AAClB,gBAAA,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;gBACpC,QAAQ;AACN,oBAAA,YAAY,KAAK;AACf,0BAAE,MAAM,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,SAAS,KAAI;4BAC3C,OAAO;gCACL,EAAE,EAAE,SAAS,CAAC,EAAE;AAChB,gCAAA,IAAI,EAAE,SAAS,CAAC,QAAQ,CAAC,IAAI;gCAC7B,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAwB;6BAC3E;yBACF,CAAC,IAAI;0BACN,EAAE;;AAGV,YAAA,QAAQ,GAAG;AACT,gBAAA,IAAI,EAAE,MAAM,CAAC,OAAO,EAAE,OAAO;AAC7B,gBAAA,KAAK,EAAE,QAAQ;AACf,gBAAA,QAAQ,EAAE,eAAe;aAC1B;;QACD,OAAO,KAAK,EAAE;;AAEd,YAAA,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE,KAAK,CAAC;AAC/C,YAAA,MAAM,KAAK;;;AAIb,QAAA,OAAO,CAAC,GAAG,CAAC,8BAA8B,EAAE,QAAQ,CAAC;AACrD,QAAA,OAAO,QAAQ;;AAGjB,IAAA,MAAM,YAAY,CAAC,aAAqB,EAAE,OAA6B,EAAA;AACrE,QAAA,MAAM,YAAY,GAAG;AACnB,YAAA,IAAI,EAAE,gBAAgB,CAAC,aAAa,CAAC;AACrC,YAAA,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,0BAA0B;AAChD,YAAA,QAAQ,EAAE,OAAO,EAAE,QAAQ,IAAI,IAAI;SACpC;AACD,QAAA,IAAI;AACF,YAAA,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC;YAClF,OAAO,QAAQ,CAAC,IAAI;;QACpB,OAAO,KAAK,EAAE;;AAEd,YAAA,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,KAAK,CAAC;AAC5C,YAAA,MAAM,KAAK;;;AAIf,IAAA,MAAM,YAAY,CAAC,OAAe,EAAE,OAA6B,EAAA;AAC/D,QAAA,MAAM,YAAY,GAAG;AACnB,YAAA,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,mBAAmB,IAAI,OAAO;AACpD,YAAA,KAAK,EAAE,OAAO;AACd,YAAA,KAAK,EAAE,OAAO,EAAE,KAAK,IAAI,OAAO;AAChC,YAAA,eAAe,EAAE,OAAO,EAAE,cAAc,IAAI,KAAK;SAClD;AACD,QAAA,IAAI;AACF,YAAA,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC;YAC1E,MAAM,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC;AACxD,YAAA,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,WAAW,EAAE;YAChD,OAAO;AACL,gBAAA,WAAW,EAAE,WAAY;AACzB,gBAAA,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;aAClC;;QACD,OAAO,KAAK,EAAE;;AAEd,YAAA,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,KAAK,CAAC;AAC5C,YAAA,MAAM,KAAK;;;AAGhB;;AChPK,MAAO,kBAAmB,SAAQ,aAA0B,CAAA;AAChE,IAAA,WAAA,CACE,SAAY,GAAA;QACV,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,oBAAoB,IAAI,OAAO,CAAC,GAAG,CAAC,oBAAoB,IAAI,EAAE;AAClH,QAAA,YAAY,EAAE,OAAO,CAAC,GAAG,CAAC,gCAAiC;AAC3D,QAAA,0BAA0B,EAAE,OAAO,CAAC,GAAG,CAAC,+CAAgD;AACxF,QAAA,mBAAmB,EAAE,OAAO,CAAC,GAAG,CAAC,uCAAwC;AACzE,QAAA,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,qBAAsB;AAC5C,QAAA,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,kBAAmB;AAC5C,KAAA,EAAA;QAED,MAAM,SAAS,GAAG,IAAI,WAAW,CAAC,EAAE,MAAM,EAAE,SAAS,CAAC,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC,QAAQ,EAAE,UAAU,EAAE,SAAS,CAAC,UAAU,EAAE,CAAC;AAC/H,QAAA,KAAK,CAAC,SAAS,EAAE,SAAS,CAAC;;AAE9B;;MCZY,gBAAgB,CAAA;AAG3B,IAAA,WAAA,CACY,SAAY,GAAA;QACpB,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,iBAAiB,IAAI,OAAO,CAAC,GAAG,CAAC,iBAAiB,IAAI,EAAE;AAC5G,QAAA,YAAY,EAAE,OAAO,CAAC,GAAG,CAAC,wBAAyB;AACpD,KAAA,EAAA;QAHS,IAAS,CAAA,SAAA,GAAT,SAAS;AAKnB,QAAA,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;AACzB,QAAA,IAAI,CAAC,eAAe,GAAG,IAAI,SAAS,CAAC,EAAE,MAAM,EAAE,SAAS,CAAC,MAAM,EAAE,CAAC;;AAG5D,IAAA,SAAS,CAAC,SAAiC,EAAA;AACjD,QAAA,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;AAC7C,YAAA,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;AACnB,gBAAA,MAAM,IAAI,KAAK,CAAC,aAAa,GAAG,CAAA,yBAAA,CAA2B,CAAC;;;;AAK1D,IAAA,YAAY,CAAC,KAAgB,EAAA;AACnC,QAAA,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,KAAI;YACxB,OAAO;gBACL,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,YAAY,EAAE,IAAI,CAAC,WAAyC;aAC7D;AACH,SAAC,CAAC;;IAGI,MAAM,uBAAuB,CAAC,QAAgB,EAAA;AAIpD,QAAA,IAAI;AACF,YAAA,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC;AACtC,YAAA,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,WAAW,EAAE;YAChD,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;AAEvC,YAAA,MAAM,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,YAAY;YACrE,MAAM,aAAa,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;AAC/C,YAAA,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE;;QAClC,OAAO,KAAK,EAAE;AACd,YAAA,MAAM,IAAI,KAAK,CAAC,qCAAqC,KAAK,CAAA,CAAE,CAAC;;;AAIzD,IAAA,yBAAyB,CAAC,QAAkC,EAAA;QAClE,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,MAAM;YAChC,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO;AACpC,kBAAE,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,KACvB,IAAI,CAAC,IAAI,KAAK,OAAO,GAAI,EAAE,GAAG,IAAI,EAAE,MAAM,EAAE,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,EAAgC,GAAG,IAAI;kBAEzH,OAAO,CAAC,OAAO;AACpB,SAAA,CAAC,CAAC;;IAGL,MAAM,eAAe,CACnB,YAAsB,EACtB,oBAAiD,EACjD,OAAkC,EAClC,UAMC,EAAA;QAED,MAAM,oBAAoB,GAA+B,EAAE;AAC3D,QAAA,YAAY,CAAC,OAAO,CAAC,CAAC,GAAG,KAAI;YAC3B,oBAAoB,CAAC,IAAI,CAAC;AACxB,gBAAA,IAAI,EAAE,MAAM;AACZ,gBAAA,IAAI,EAAE,GAAG;AACV,aAAA,CAAC;AACJ,SAAC,CAAC;QACF,IAAI,eAAe,GAA6B,EAAE;QAClD,IAAI,UAAU,EAAE;YACd,MAAM,WAAW,GACf,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,UAAU,KAAI;gBACzC,OAAO;oBACL,WAAW,EAAE,UAAU,CAAC,EAAE;AAC1B,oBAAA,IAAI,EAAE,aAAsB;oBAC5B,OAAO,EAAE,UAAU,CAAC,OAAO;iBACM;aACpC,CAAC,IAAI,EAAE;AACV,YAAA,eAAe,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC;;aAC/E;AACL,YAAA,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,GAAG,CAC5B,oBAAoB,CAAC,GAAG,CAAC,OAAO,OAAO,KAAI;AACzC,gBAAA,IAAI,OAAO,CAAC,KAAK,EAAE;AACjB,oBAAA,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC;oBACzF,OAAO;AACL,wBAAA,IAAI,EAAE,OAAO;AACb,wBAAA,MAAM,EAAE;AACN,4BAAA,IAAI,EAAE,QAAQ;AACd,4BAAA,UAAU,EAAE,QAAQ;AACpB,4BAAA,IAAI,EAAE,aAAa;AACpB,yBAAA;qBAC2B;;qBACzB;oBACL,OAAO;AACL,wBAAA,IAAI,EAAE,MAAM;AACZ,wBAAA,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,EAAE;qBACG;;aAEhC,CAAC,CACH;YACD,eAAe,CAAC,IAAI,CAAC;AACnB,gBAAA,IAAI,EAAE,MAAM;AACZ,gBAAA,OAAO,EAAE,IAAI;AACd,aAAA,CAAC;;AAGJ,QAAA,MAAM,WAAW,GACf,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG;AACtC,cAAE;gBACE,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC;gBACvC,WAAW,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,UAAU,IAAI,MAAM,EAA0B;AAC5E;cACD,EAAE;AAER,QAAA,MAAM,UAAU,GAAkC;AAChD,YAAA,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY;AAClC,YAAA,QAAQ,EAAE,eAAe;AACzB,YAAA,MAAM,EAAE,oBAAoB;AAC5B,YAAA,UAAU,EAAG,OAAO,CAAC,SAAoB,IAAI,IAAI;AACjD,YAAA,WAAW,EAAG,OAAO,CAAC,WAAsB,IAAI,GAAG;AACnD,YAAA,GAAG,WAAW;SACf;AACD,QAAA,IAAI,QAAQ,GAA+B;AACzC,YAAA,IAAI,EAAE,EAAE;AACR,YAAA,KAAK,EAAE,EAAE;AACT,YAAA,QAAQ,EAAE,EAAE;SACb;AACD,QAAA,IAAI;;YAEF,MAAM,eAAe,GAAG,IAAI,CAAC,yBAAyB,CAAC,eAAe,CAAC;;YAGvE,OAAO,CAAC,GAAG,CACT,mDAAmD,EACnD,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,EACpC,uBAAuB,EACvB,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAChC;AACD,YAAA,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC;AAC3E,YAAA,MAAM,QAAQ,GAAG,YAAY,CAAC,OAAO;AACrC,YAAA,MAAM,UAAU,GAAG,YAAY,CAAC,WAAW;;AAE3C,YAAA,OAAO,CAAC,GAAG,CAAC,CAAA,mCAAA,EAAsC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAA,aAAA,EAAgB,UAAU,CAAA,CAAE,CAAC;YAEvG,IAAI,QAAQ,GAAmE,EAAE;YACjF,IAAI,YAAY,EAAE;gBAChB,eAAe,CAAC,IAAI,CAAC;oBACnB,IAAI,EAAE,YAAY,CAAC,IAAI;AACvB,oBAAA,OAAO,EAAE,QAAQ;AAClB,iBAAA,CAAC;gBACF,QAAQ;AACN,oBAAA,UAAU,KAAK;AACb,0BAAE;AACE,8BAAE,MAAM,CAAC,CAAC,YAAY,KAAK,YAAY,CAAC,IAAI,KAAK,UAAU;AAC1D,6BAAA,GAAG,CAAC,CAAC,YAAY,KAAI;4BACpB,OAAO;gCACL,EAAE,EAAE,YAAY,CAAC,EAAE;gCACnB,IAAI,EAAE,YAAY,CAAC,IAAI;AACvB,gCAAA,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,KAAK,CAAC,CAAwB;6BACjF;yBACF,CAAC,IAAI;0BACR,EAAE;;AAGV,YAAA,QAAQ,GAAG;gBACT,IAAI,EACF,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,OAAO,CAAC,cAAc,KAAK;sBAC9C,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS;sBACnC,QAAQ,CAAC,CAAC,CAAyB,CAAC,IAAI,IAAI,IAAI;AACvD,gBAAA,KAAK,EAAE,QAAQ;AACf,gBAAA,QAAQ,EAAE,eAAe;aAC1B;;QACD,OAAO,KAAK,EAAE;;AAEd,YAAA,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE,KAAK,CAAC;AAC/C,YAAA,MAAM,KAAK;;;AAIb,QAAA,OAAO,CAAC,GAAG,CAAC,8BAA8B,EAAE,QAAQ,CAAC;AACrD,QAAA,OAAO,QAAQ;;AAGjB,IAAA,MAAM,YAAY,CAAC,EAAU,EAAE,GAAyB,EAAA;;AAEtD,QAAA,IAAI;AACF,YAAA,OAAO,aAAa;;QACpB,OAAO,KAAK,EAAE;;AAEd,YAAA,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,KAAK,CAAC;AAC5C,YAAA,MAAM,KAAK;;;AAIf,IAAA,MAAM,YAAY,CAAC,CAAS,EAAE,OAA6B,EAAA;;AAEzD,QAAA,IAAI;YACF,MAAM,WAAW,GAAG,OAAO,EAAE,cAAc,KAAK,KAAK,IAAI,OAAO,EAAE,cAAc,KAAK,KAAK,GAAG,OAAO,CAAC,cAAc,GAAG,KAAK;YAC3H,MAAM,KAAK,GAAG,MAAMA,QAAE,CAAC,QAAQ,CAAC,CAAkB,eAAA,EAAA,WAAW,CAAE,CAAA,CAAC;AAChE,YAAA,MAAM,WAAW,GAAG,WAAW,KAAK,KAAK,GAAG,YAAY,GAAG,CAAS,MAAA,EAAA,WAAW,EAAE;YACjF,OAAO;AACL,gBAAA,WAAW,EAAE,WAAW;AACxB,gBAAA,OAAO,EAAE,KAAK;aACf;;QACD,OAAO,KAAK,EAAE;;AAEd,YAAA,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,KAAK,CAAC;AAC5C,YAAA,MAAM,KAAK;;;AAGhB;;MC/MY,aAAa,CAAA;AAGxB,IAAA,WAAA,CACY,SAAY,GAAA;QACpB,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,cAAc,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,EAAE;AACtG,QAAA,YAAY,EAAE,OAAO,CAAC,GAAG,CAAC,qBAAsB;AACjD,KAAA,EAAA;QAHS,IAAS,CAAA,SAAA,GAAT,SAAS;AAKnB,QAAA,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;QACzB,IAAI,CAAC,YAAY,GAAG,IAAI,kBAAkB,CAAC,SAAS,CAAC,MAAM,CAAC;;AAGtD,IAAA,SAAS,CAAC,SAAiC,EAAA;AACjD,QAAA,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;AAC7C,YAAA,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;AACnB,gBAAA,MAAM,IAAI,KAAK,CAAC,aAAa,GAAG,CAAA,yBAAA,CAA2B,CAAC;;;;;AAM1D,IAAA,eAAe,CAAC,MAA2B,EAAA;QACjD,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,KAAK,IAAI,EAAE;AACjD,YAAA,OAAO,MAAM;;AAEf,QAAA,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE;YAC5B,MAAM,aAAa,GAAwB,EAAE;YAC7C,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KAAI;gBAClC,IAAI,GAAG,KAAK,sBAAsB,IAAI,GAAG,KAAK,SAAS,EAAE;AACvD,oBAAA,IAAI,GAAG,KAAK,YAAY,EAAE;wBACxB,aAAa,CAAC,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,CAC9D,CAAC,GAAG,EAAE,OAAO,MAAM;AACjB,4BAAA,GAAG,GAAG;AACN,4BAAA,CAAC,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;yBAC5D,CAAC,EACF,EAAE,CACH;;yBACI;wBACL,aAAa,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC;;;AAGtC,aAAC,CAAC;AACF,YAAA,OAAO,aAAa;;QAEtB,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,IAAI,MAAM,CAAC,KAAK,EAAE;YAC3C,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,EAAE,GAAG,MAAM;YACjC,OAAO;AACL,gBAAA,GAAG,IAAI;AACP,gBAAA,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;aACnC;;AAEH,QAAA,OAAO,MAAM;;AAGP,IAAA,YAAY,CAAC,KAAgB,EAAA;QACnC,MAAM,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,KAAI;YACnC,OAAO;gBACL,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC;aAC5B;AAC1B,SAAC,CAAC;AACF,QAAA,OAAO,CAAC,EAAE,oBAAoB,EAAE,SAAS,EAAE,CAAC;;AAGtC,IAAA,+BAA+B,CAAC,IAAa,EAAA;QACnD,OAAO;AACL,YAAA,gBAAgB,EAAE,kBAAkB;YACpC,cAAc,EAAE,IAAI,CAAC,WAA6B;SACnD;;IAGK,MAAM,uBAAuB,CAAC,QAAgB,EAAA;AAIpD,QAAA,IAAI;AACF,YAAA,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC;AACtC,YAAA,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,WAAW,EAAE;YAChD,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;AAEvC,YAAA,MAAM,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,YAAY;YACrE,MAAM,aAAa,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;AAC/C,YAAA,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE;;QAClC,OAAO,KAAK,EAAE;AACd,YAAA,MAAM,IAAI,KAAK,CAAC,qCAAqC,KAAK,CAAA,CAAE,CAAC;;;AAIzD,IAAA,yBAAyB,CAAC,QAAmB,EAAA;QACnD,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,MAAM;YAChC,IAAI,EAAE,OAAO,CAAC,IAAI;AAClB,YAAA,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,UAAU,EAAE,IAAI,GAAI,EAAE,GAAG,IAAI,EAAE,UAAU,EAAE,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE,EAAW,GAAG,IAAI,CAAC,CAAC;AACjJ,SAAA,CAAC,CAAC;;IAGL,MAAM,eAAe,CACnB,YAAsB,EACtB,oBAAiD,EACjD,OAAkC,EAClC,UAMC,EAAA;AAED,QAAA,MAAM,oBAAoB,GAAY;AACpC,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,KAAK,EAAE,EAAE;SACV;AACD,QAAA,YAAY,CAAC,OAAO,CAAC,CAAC,GAAG,KAAI;AAC3B,YAAA,oBAAoB,CAAC,KAAK,CAAC,IAAI,CAAC;AAC9B,gBAAA,IAAI,EAAE,GAAG;AACV,aAAA,CAAC;AACJ,SAAC,CAAC;QACF,IAAI,eAAe,GAAc,EAAE;QACnC,IAAI,UAAU,EAAE;YACd,MAAM,QAAQ,GACZ,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,UAAU,KAAI;AACzC,gBAAA,OAAO,EAAE,IAAI,EAAE,UAAU,CAAC,OAAO,EAAE;aACpC,CAAC,IAAI,EAAE;AACV,YAAA,eAAe,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;;aAC1E;AACL,YAAA,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAChC,oBAAoB,CAAC,GAAG,CAAC,OAAO,OAAO,KAAI;AACzC,gBAAA,IAAI,OAAO,CAAC,KAAK,EAAE;AACjB,oBAAA,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC;oBACzF,OAAO;AACL,wBAAA,UAAU,EAAE;AACV,4BAAA,QAAQ,EAAE,QAAQ;AAClB,4BAAA,IAAI,EAAE,aAAa;AACpB,yBAAA;qBACF;;qBACI;oBACL,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,EAAE,EAAE;;aAEtC,CAAC,CACH;AACD,YAAA,eAAe,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;;QAGzD,IAAI,WAAW,GAAG,EAAE;QACpB,IAAI,eAAe,GAAG,EAAE;AACxB,QAAA,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7C,WAAW;gBACT,OAAO,CAAC,cAAc,KAAK;AACzB,sBAAE;wBACE,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC;AACvC,wBAAA,UAAU,EAAE;AACV,4BAAA,qBAAqB,EAAE;AACrB,gCAAA,IAAI,EAAG,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,WAAW,EAA0B,IAAI,mBAAmB,CAAC,IAAI;AACpG,6BAAA;AACF,yBAAA;AACF;sBACD,EAAE;YACR,eAAe,GAAG,OAAO,CAAC,cAAc,KAAK,iBAAiB,GAAG,IAAI,CAAC,+BAA+B,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;;AAG9H,QAAA,MAAM,WAAW,GAAgB;AAC/B,YAAA,cAAc,EAAE;AACd,gBAAA;oBACE,QAAQ,EAAE,YAAY,CAAC,+BAA+B;oBACtD,SAAS,EAAE,kBAAkB,CAAC,eAAe;AAC9C,iBAAA;AACF,aAAA;AACD,YAAA,gBAAgB,EAAE;AAChB,gBAAA,eAAe,EAAG,OAAO,CAAC,SAAoB,IAAI,IAAI;AACtD,gBAAA,WAAW,EAAG,OAAO,CAAC,WAAsB,IAAI,GAAG;AACnD,gBAAA,GAAG,eAAe;AACnB,aAAA;AACD,YAAA,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY;AAClC,YAAA,iBAAiB,EAAE,oBAAoB;AACvC,YAAA,GAAG,WAAW;SACf;AACD,QAAA,IAAI,QAAQ,GAA+B;AACzC,YAAA,IAAI,EAAE,EAAE;AACR,YAAA,KAAK,EAAE,EAAE;AACT,YAAA,QAAQ,EAAE,EAAE;SACb;AACD,QAAA,IAAI;;YAEF,MAAM,eAAe,GAAG,IAAI,CAAC,yBAAyB,CAAC,eAAe,CAAC;;AAGvE,YAAA,OAAO,CAAC,GAAG,CAAC,8CAA8C,EAAE,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;AAE5F,YAAA,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC;AACzF,gBAAA,QAAQ,EAAE,eAAe;AAC1B,aAAA,CAAC;AACF,YAAA,MAAM,YAAY,GAAG,UAAU,CAAC,QAAQ;AACxC,YAAA,MAAM,IAAI,GAAG,YAAY,CAAC,IAAI,EAAE;AAChC,YAAA,MAAM,SAAS,GAAG,YAAY,CAAC,aAAa,EAAE;AAC9C,YAAA,MAAM,YAAY,GAAG,YAAY,CAAC,UAAU,IAAI,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,YAAY;;AAEvF,YAAA,OAAO,CAAC,GAAG,CAAC,CAA2C,wCAAA,EAAA,IAAI,4BAA4B,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAA,eAAA,EAAkB,YAAY,CAAA,CAAE,CAAC;YAEjJ,IAAI,QAAQ,GAAmE,EAAE;YACjF,IAAI,YAAY,EAAE;gBAChB,MAAM,KAAK,GAAuB,EAAE;AACpC,gBAAA,QAAQ,GAAG;sBACP,SAAS,EAAE,GAAG,CAAC,CAAC,QAAQ,KAAI;wBAC1B,KAAK,CAAC,IAAI,CAAC,EAAE,YAAY,EAAE,QAAQ,EAAE,CAAC;wBACtC,OAAO;AACL,4BAAA,EAAE,EAAE,EAAE;4BACN,IAAI,EAAE,QAAQ,CAAC,IAAI;AACnB,4BAAA,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAwB;yBAC5E;qBACF,CAAC,IAAI;sBACN,EAAE;AACN,gBAAA,eAAe,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;;AAGvD,YAAA,QAAQ,GAAG;AACT,gBAAA,IAAI,EAAE,IAAI;AACV,gBAAA,KAAK,EAAE,QAAQ;AACf,gBAAA,QAAQ,EAAE,eAAe;aAC1B;;QACD,OAAO,KAAK,EAAE;;AAEd,YAAA,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE,KAAK,CAAC;AAC/C,YAAA,MAAM,KAAK;;;AAIb,QAAA,OAAO,CAAC,GAAG,CAAC,8BAA8B,EAAE,QAAQ,CAAC;AACrD,QAAA,OAAO,QAAQ;;AAGjB,IAAA,MAAM,YAAY,CAAC,EAAU,EAAE,GAAyB,EAAA;;AAEtD,QAAA,IAAI;AACF,YAAA,OAAO,aAAa;;QACpB,OAAO,KAAK,EAAE;;AAEd,YAAA,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,KAAK,CAAC;AAC5C,YAAA,MAAM,KAAK;;;AAIf,IAAA,MAAM,YAAY,CAAC,CAAS,EAAE,OAA6B,EAAA;;AAEzD,QAAA,IAAI;YACF,MAAM,WAAW,GAAG,OAAO,EAAE,cAAc,KAAK,KAAK,IAAI,OAAO,EAAE,cAAc,KAAK,KAAK,GAAG,OAAO,CAAC,cAAc,GAAG,KAAK;YAC3H,MAAM,KAAK,GAAG,MAAMA,QAAE,CAAC,QAAQ,CAAC,CAAkB,eAAA,EAAA,WAAW,CAAE,CAAA,CAAC;AAChE,YAAA,MAAM,WAAW,GAAG,WAAW,KAAK,KAAK,GAAG,YAAY,GAAG,CAAS,MAAA,EAAA,WAAW,EAAE;YACjF,OAAO;AACL,gBAAA,WAAW,EAAE,WAAW;AACxB,gBAAA,OAAO,EAAE,KAAK;aACf;;QACD,OAAO,KAAK,EAAE;;AAEd,YAAA,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,KAAK,CAAC;AAC5C,YAAA,MAAM,KAAK;;;AAGhB;;MC/QY,WAAW,CAAA;AAGtB,IAAA,WAAA,CACY,SAAY,GAAA;QACpB,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,YAAY,IAAI,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,EAAE;AAClG,QAAA,YAAY,EAAE,OAAO,CAAC,GAAG,CAAC,mBAAoB;AAC/C,KAAA,EAAA;QAHS,IAAS,CAAA,SAAA,GAAT,SAAS;AAKnB,QAAA,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;AACzB,QAAA,IAAI,CAAC,UAAU,GAAG,IAAI,IAAI,CAAC,EAAE,MAAM,EAAE,SAAS,CAAC,MAAM,EAAE,CAAC;;AAGlD,IAAA,SAAS,CAAC,SAAiC,EAAA;AACjD,QAAA,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;AAC7C,YAAA,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;AACnB,gBAAA,MAAM,IAAI,KAAK,CAAC,aAAa,GAAG,CAAA,yBAAA,CAA2B,CAAC;;;;AAK1D,IAAA,YAAY,CAAC,KAAgB,EAAA;AACnC,QAAA,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,KAAI;YACxB,OAAO;AACL,gBAAA,IAAI,EAAE,UAAU;AAChB,gBAAA,QAAQ,EAAE;oBACR,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,WAAW,EAAE,IAAI,CAAC,WAAW;oBAC7B,UAAU,EAAE,IAAI,CAAC,WAAW;AAC7B,iBAAA;aACF;AACH,SAAC,CAAC;;IAGJ,MAAM,eAAe,CACnB,YAAsB,EACtB,oBAAiD,EACjD,OAAkC,EAClC,UAMC,EAAA;QAED,IAAI,eAAe,GAA2C,EAAE;QAChE,IAAI,UAAU,EAAE;YACd,MAAM,WAAW,GACf,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,UAAU,KAAI;gBACzC,OAAO;oBACL,YAAY,EAAE,UAAU,CAAC,EAAE;AAC3B,oBAAA,IAAI,EAAE,MAAM;oBACZ,OAAO,EAAE,UAAU,CAAC,OAAO;iBACY;aAC1C,CAAC,IAAI,EAAE;YACV,eAAe,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC;;aACpD;;;AAGL,YAAA,MAAM,QAAQ,GAAG,oBAAoB,CAAC,IAAI,CAAC,CAAC,OAAO,KAAK,OAAO,CAAC,KAAK,CAAC;YACtE,IAAI,QAAQ,EAAE;gBACZ,eAAe,CAAC,IAAI,CAAC;AACnB,oBAAA,IAAI,EAAE,MAAM;oBACZ,OAAO,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,KAAI;wBAChC,OAAO;AACL,4BAAA,IAAI,EAAE,MAAM;AACZ,4BAAA,IAAI,EAAE,GAAG;yBACV;AACH,qBAAC,CAAC;AACH,iBAAA,CAAC;;iBACG;AACL,gBAAA,YAAY,CAAC,OAAO,CAAC,CAAC,GAAG,KAAI;oBAC3B,eAAe,CAAC,IAAI,CAAC;AACnB,wBAAA,IAAI,EAAE,QAAQ;AACd,wBAAA,OAAO,EAAE,GAAG;AACb,qBAAA,CAAC;AACJ,iBAAC,CAAC;;YAGJ,eAAe,CAAC,IAAI,CAAC;AACnB,gBAAA,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE,oBAAoB,CAAC,GAAG,CAAC,CAAC,OAAO,KAAI;oBAC5C,OAAO,OAAO,CAAC;AACb,0BAAE;AACE,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE;AACT,gCAAA,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC,GAAG;AACtB,gCAAA,MAAM,EAAE,OAAO,CAAC,KAAK,CAAC,MAAM,IAAI,MAAM;AACvC,6BAAA;AACF;AACH,0BAAE;AACE,4BAAA,IAAI,EAAE,MAAM;AACZ,4BAAA,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,EAAE;yBACzB;AACP,iBAAC,CAAC;AACH,aAAA,CAAC;;QAGJ,IAAI,WAAW,GAAG,EAAE;QACpB,IAAI,eAAe,GAAG,EAAE;AACxB,QAAA,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7C,WAAW;gBACT,OAAO,CAAC,cAAc,KAAK;AACzB,sBAAE;wBACE,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC;AACvC,wBAAA,WAAW,EAAE,OAAO,CAAC,UAAU,IAAK,MAAmD;AACxF;sBACD,EAAE;YACR,eAAe;gBACb,OAAO,CAAC,cAAc,KAAK;AACzB,sBAAE;AACE,wBAAA,eAAe,EAAE;AACf,4BAAA,IAAI,EAAE,aAAa;AAC+B,yBAAA;AACrD;sBACD,EAAE;;AAGV,QAAA,MAAM,UAAU,GAAG;AACjB,YAAA,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY;AAClC,YAAA,QAAQ,EAAE,eAAe;AACzB,YAAA,UAAU,EAAG,OAAO,CAAC,SAAoB,IAAI,IAAI;AACjD,YAAA,WAAW,EAAG,OAAO,CAAC,WAAsB,IAAI,GAAG;AACnD,YAAA,GAAG,WAAW;AACd,YAAA,GAAG,eAAe;SACnB;AACD,QAAA,IAAI,QAAQ,GAA+B;AACzC,YAAA,IAAI,EAAE,EAAE;AACR,YAAA,KAAK,EAAE,EAAE;AACT,YAAA,QAAQ,EAAE,EAAE;SACb;AACD,QAAA,IAAI;;AAEF,YAAA,OAAO,CAAC,GAAG,CAAC,8CAA8C,EAAE,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;AAC5F,YAAA,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC;YAC9E,MAAM,MAAM,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;AACtC,YAAA,MAAM,YAAY,GAAG,MAAM,CAAC,aAAa;;AAEzC,YAAA,OAAO,CAAC,GAAG,CAAC,CAAgD,6CAAA,EAAA,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA,eAAA,EAAkB,YAAY,CAAA,CAAE,CAAC;YAE3H,IAAI,QAAQ,GAAmE,EAAE;AACjF,YAAA,IAAI,MAAM,CAAC,OAAO,EAAE;AAClB,gBAAA,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;gBACpC,QAAQ;AACN,oBAAA,YAAY,KAAK;AACf,0BAAE,MAAM,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,SAAS,KAAI;4BAC3C,OAAO;gCACL,EAAE,EAAE,SAAS,CAAC,EAAE;AAChB,gCAAA,IAAI,EAAE,SAAS,CAAC,QAAQ,CAAC,IAAI;gCAC7B,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAwB;6BAC3E;yBACF,CAAC,IAAI;0BACN,EAAE;;AAGV,YAAA,QAAQ,GAAG;AACT,gBAAA,IAAI,EAAE,MAAM,CAAC,OAAO,EAAE,OAAO;AAC7B,gBAAA,KAAK,EAAE,QAAQ;AACf,gBAAA,QAAQ,EAAE,eAAe;aAC1B;;QACD,OAAO,KAAK,EAAE;;AAEd,YAAA,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE,KAAK,CAAC;AAC/C,YAAA,MAAM,KAAK;;;AAIb,QAAA,OAAO,CAAC,GAAG,CAAC,8BAA8B,EAAE,QAAQ,CAAC;AACrD,QAAA,OAAO,QAAQ;;AAGjB,IAAA,MAAM,YAAY,CAAC,EAAU,EAAE,GAAyB,EAAA;;AAEtD,QAAA,IAAI;AACF,YAAA,OAAO,aAAa;;QACpB,OAAO,KAAK,EAAE;;AAEd,YAAA,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,KAAK,CAAC;AAC5C,YAAA,MAAM,KAAK;;;AAIf,IAAA,MAAM,YAAY,CAAC,CAAS,EAAE,OAA6B,EAAA;;AAEzD,QAAA,IAAI;YACF,MAAM,WAAW,GAAG,OAAO,EAAE,cAAc,KAAK,KAAK,IAAI,OAAO,EAAE,cAAc,KAAK,KAAK,GAAG,OAAO,CAAC,cAAc,GAAG,KAAK;YAC3H,MAAM,KAAK,GAAG,MAAMA,QAAE,CAAC,QAAQ,CAAC,CAAkB,eAAA,EAAA,WAAW,CAAE,CAAA,CAAC;AAChE,YAAA,MAAM,WAAW,GAAG,WAAW,KAAK,KAAK,GAAG,YAAY,GAAG,CAAS,MAAA,EAAA,WAAW,EAAE;YACjF,OAAO;AACL,gBAAA,WAAW,EAAE,WAAW;AACxB,gBAAA,OAAO,EAAE,KAAK;aACf;;QACD,OAAO,KAAK,EAAE;;AAEd,YAAA,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,KAAK,CAAC;AAC5C,YAAA,MAAM,KAAK;;;AAGhB;;ACpMD,MAAM,iBAAiB,GAA0C;AAC/D,IAAA,MAAM,EAAE,aAAa;AACrB,IAAA,WAAW,EAAE,kBAAkB;AAC/B,IAAA,SAAS,EAAE,gBAAgB;AAC3B,IAAA,MAAM,EAAE,aAAa;AACrB,IAAA,IAAI,EAAE,WAAW;CAClB;AAED,MAAM,iBAAiB,GAAG,CAAC,KAAa,KAAgB;AACtD,IAAA,MAAM,eAAe,GAAG,iBAAiB,CAAC,KAAK,CAAC;IAChD,OAAO,IAAI,eAAe,EAAE;AAC9B;;ACjBO,MAAM,gCAAgC,GAAG,CAAC,CAAC,MAAM,CAAC;AACvD,IAAA,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC3B,KAAK,EAAE,CAAC,CAAC,KAAK,CACZ,CAAC,CAAC,MAAM,CAAC;AACP,QAAA,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE;AACd,QAAA,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE;QAChB,SAAS,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;AAC7B,KAAA,CAAC,CACH;IACD,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;AAC3B,CAAA,CAAC;AAEK,MAAM,+BAA+B,GAAG,CAAC,CAAC,MAAM,CAAC;AACtD,IAAA,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;AAC3B,IAAA,KAAK,EAAE;AACJ,SAAA,MAAM,CAAC;AACN,QAAA,GAAG,EAAE,CAAC,CAAC,MAAM,EAAE;AACf,QAAA,MAAM,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE;KAC3B;AACA,SAAA,QAAQ,EAAE;AACb,IAAA,KAAK,EAAE;AACJ,SAAA,MAAM,CAAC;AACN,QAAA,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE;AAChB,QAAA,MAAM,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE;KAC3B;AACA,SAAA,QAAQ,EAAE;AACd,CAAA,CAAC;AAEK,MAAM,+BAA+B,GAAG;AAC5C,KAAA,MAAM,CAAC;AACN,IAAA,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,EAAE;AAClC,IAAA,UAAU,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE;AAC9B,IAAA,cAAc,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC,CAAC,QAAQ,EAAE;CACnE;AACA,KAAA,QAAQ,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;AAEb,MAAM,6BAA6B,GAAG,CAAC,CAAC,MAAM,CAAC;AACpD,IAAA,WAAW,EAAE,CAAC,CAAC,MAAM,EAAE;AACvB,IAAA,OAAO,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC;AAC9B,CAAA,CAAC;AAEK,MAAM,aAAa,GAAG,CAAC,CAAC,MAAM,CAAC;AACpC,IAAA,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE;AAChB,IAAA,WAAW,EAAE,CAAC,CAAC,MAAM,EAAE;AACvB,IAAA,WAAW,EAAE,CAAC,CAAC,MAAM,CAAC;AACpB,QAAA,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE;QAChB,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;QAC7B,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;KAC9B,CAAC;AACH,CAAA,CAAC;;;;;;;;;;;;;"}